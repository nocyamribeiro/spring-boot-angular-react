WEBVTT

From the introduction lecture you have learnt what Micro Services are and a couple of important characteristics
of a Micro service. In this lecture, you'll learn a few more characteristics or advantages of using Micro Services
starting with heterogeneity meaning each of our Micro service can be written in a different programming language
and they can run on a different platform or operating system. And they can all communicate using the
APIs they expose which usually are REST. Going back to our Hospital Management application example, the
clinical module could be developed in Java, the Python or the registration module, the patient registration
module could be developed in Python, Claim management in NodeJS and Bed management in .Net.
So we can choose a technology that suits that particular requirement in a better fashion. In monolithic
application,
we cannot do that.
Usually we end up coding the whole thing in one single technology. And it's even harder to migrate
to a different technology or platform which is out in the market and which is better to use because
we'll have to migrate and entire application or code base. But in case if Micro Services we can easily migrate
a particular module
if there is a technology out there which suits it better. The second important characteristics is a Robustness.
If one of the component of the system fails then that will not bring down the entire application which
is the case in case of monolithic applications. In case of Micro services we can gracefully degrade
that particular service. For example if the Clinical module goes down the entire Hospital Management application
will not be down.
The patient registration will still continue, claim management will work and also the Bed management.
So micro services are or should be robust.
Scalability, as our application's user base grows and a lot of users start accessing our application,
our application should be able to scale. In case of a monolithic application we'll have to deploy the entire application
to multiple servers
although the load is actually on a few modules in our application. For example, if a lot of patient registration
is happening or if a lot of clinical data is coming in, instead of just increasing the number of deployments
for these two modules, we'll have to deploy the whole application.
But in case of Micro Services, we can simply deploy those modules or those Micro Services to multiple 
servers depending on the number of users using that particular module or Micro Service. Next important
characteristic is Easy to deploy.
With a monolithic application even to do a small bug fix,
we'll have to deploy the entire application. But with the micro service
we can simply deploy a particular service when we do a bugfix in that particular service or even
a new feature could be easily added to an existing Micro Service and only that service will be deployed
to production.
This is a big deal because we can quickly push our features to production and to the customer without
a large impact.
Last but not the least, reusability and replaceability. As each of the Micro Services use one another,
it should be easy to replace them. For example, in this case the patient registration module is being used
by Clinical application or Micro Service as well as the Bed management as well as Claim management to
get the patient information. So that is reusability. Replaceability meaning, if we have a better service
or if we are getting a different, the same service from a different vendor,
for example the Bed management, if we have decided that we are going to buy out a different Bed management
module which is lot better from a third party vendor we should be able to easily replace this Bed management
module with the version of software which we are getting from a third party vendor.
So all these are important characteristics of Micro Services starting from heterogenous, robustness, scalable,
easy to deploy and they should be reusable and replaceable.
